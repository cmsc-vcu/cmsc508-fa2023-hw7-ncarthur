---
title: Homework 7 - Creating a resume database
author: Nick Arthur
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

In this homeowrk assignment, we are creating a ddl file and building a database from scratch using SQL. We have a high-level diagram for our schema, the list of tables, and some sample data.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-ncarthur>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

Ths database represents a company-wide resume capturing the collective skills and certifications of all the people in my company. The database captures skills, employees and their roles within the company. The database helps us find employees with specific skills, lists the skills of any employees and helps find gaps in the skill sets of employees in specific roles.

## Crows-foot diagram

A Crows-foot diagram of the database per the specification.

![Crows-foot diagram](hw7-crows-foot-crop.png)

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe people. A person has a name, a linkedin profile and a headshot. 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe skills. Skills have a name, description, and a time required to aquire a particular skill.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe various roles that employees have. An employee can have multiple roles, and multiple employees can have a single role.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

Here is a sample query,

```{python}
sql = f"""
select * from skills ORDER BY skills_name;
"""
```


and here is a sample result from the query.

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true

sql = f"""
select people_first_name, people_last_name, people_email from people ORDER BY people_last_name;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true

sql = f"""
select skills_name from
    people  a 
    inner join peopleskills b on (a.people_id=b.people_id)
    inner join skills c on (b.skills_id=c.skills_id)
WHERE
    people_last_name='Person 1';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true

sql = f"""
select people_first_name, people_last_name from
    people  a 
    inner join peopleskills b on (a.people_id=b.people_id)
    inner join skills c on (b.skills_id=c.skills_id)
WHERE
    skills_tag='Skill 6';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from
    people  a 
    inner join peopleroles b on (a.people_id=b.people_id)
    inner join roles c on (b.roles_id=c.roles_id)
WHERE
    roles_name='Developer';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true

sql = f"""
select people_first_name, people_last_name, people_email from
    people  a 
    left join peopleskills b on (a.people_id=b.people_id)
WHERE
    skills_id is NULL;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true

sql = f"""
select skills_name, skills_tag from
    skills  a 
    LEFT JOIN peopleskills b on (a.skills_id=b.skills_id)
WHERE
    people_id is NULL
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true

sql = f"""
select people_first_name, people_last_name, skills_name from
    people  a 
    inner join peopleroles b on (a.people_id=b.people_id)
    inner join roles c on (b.roles_id=c.roles_id)
    LEFT JOIN peopleskills d on(a.people_id=d.people_id)
    LEFT JOIN skills e on (d.skills_id=e.skills_id)
WHERE
    roles_name='Boss';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles (there aren't any)

```{python}
#| echo: false
#| eval: true

sql = f"""
select a.roles_id, roles_name from
    roles  a 
    LEFT JOIN peopleroles b on (a.roles_id=b.roles_id)
WHERE
    people_id is NULL
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

Building databases is extremely fun. It is very easy to get caught up in the notation and keywords for SQL. However, SQL is very intuitive and there are not many keywords and weird syntax things that need to be kept in mind. It is very easy to use. I had the most fun thinking about the different joins I had to perform on the tables to answer the questions. Besides one or two questions, I knew exactly the type of joins I needed to perform on the tables to get exactly what I was looking for. Playing with the tables and answering questions about the database are my favorite parts of the database-creation process.

