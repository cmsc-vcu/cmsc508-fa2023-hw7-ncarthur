---
title: Homework 7 - Creating a resume database
author: Nick Arthur
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

In this homeowrk assignment, we are creating a ddl file and building a database from scratch using SQL. We have a high-level diagram for our schema, the list of tables, and some sample data.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-ncarthur>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

Ths database represents a company-wide resume capturing the collective skills and certifications of all the people in my company. The database captures skills, employees and their roles within the company. The database helps us find employees with specific skills, lists the skills of any employees and helps find gaps in the skill sets of employees in specific roles.

## Crows-foot diagram

A Crows-foot diagram of the database per the specification.

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE }o--o{ PEOPLE_SKILLS : has
    PEOPLE_SKILLS }o--o{ SKILLS : has
    PEOPLE }o--o{ PEOPLE_ROLES : has
    PEOPLE_ROLES }o--o{ ROLES : has
    
    PEOPLE{
        int people_id
        varchar(255) first_name
        varchar(255) last_name
        varchar(255) email
        varchar(255) linkedin
        varchar(255) headshot_url
        varchar(255) discord
        varchar(4096) bio
        date date_joined
    }
    PEOPLE_SKILLS {
        int people_skills_id
        int skills_id
        int people_id
        date date_acquired
    }
    SKILLS {
        int skills_id
        varchar(255) skills_name
        varchar(255) description
        varchar(255) tag
        varchar(255) url
        int time_commitment
    }
    PEOPLE_ROLES {
        int people_roles_id
        int people_od
        int role_id
        date date_assigned
    }
    ROLES {
        int roles_id
        varchar(255) roles_name
        int roles_sort_priority
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe people. A person has a name, a linkedin profile and a headshot. 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe skills. Skills have a name, description, and a time required to aquire a particular skill.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name


### List skill names of Person 1


### List people names with Skill 6


### List people with a DEVELOPER role


### List names and email addresses of people without skills


### List names and tags of unused skills


### List people names and skill names with the BOSS role


### List ids and names of unused roles


## Reflection

(Write a paragraph expressing your thoughts, feelings, and insights about your experience with this assignment.  Pause and breath before writing - I'm trying to encourage critical thinking and self-awareness while allowing you to explore the connections between theory and practice. And yes, delete this paragraph.)

